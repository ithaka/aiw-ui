stages:
  - build
  - deploy
  - healthcheck

default:
  tags:
    - ${ENVIRONMENT}-runner

include:
  - file: /build-image/template.yml
    project: capstan/pow/gitlab-templates
    ref: build-image-v3

  - file: /render-charts/template.yml
    project: capstan/pow/gitlab-templates
    ref: render-charts-v3

  - file: /run-argo-deployer/template.yml
    project: capstan/pow/gitlab-templates
    ref: run-argo-deployer-v3

  - project: capstan/pow/gitlab-templates
    file: argocd-sync/template.yml
    ref: argocd-sync-v3

  - project: capstan/pow/gitlab-templates
    file: check-healthy-deployment/template.yml
    ref: check-healthy-deployment-v3

# Variables that are defined in the project: AIW_ART_PATH, AIW_HELM_CHART, AIW_NPM_REGISTRY
variables:
  APP_NAME: artstor-ui
  APP_SERVICE_NAME: artstor-ui
  EUREKA_SERVICE_NAME: artstor-ui
  PIPELINE:
    description: "Select pipeline"
    value: "Select pipeline"
    options:
      - "Select pipeline"
      - "deploy"
  ENVIRONMENT:
    description: "Choose environment"
    value: "test"
    options:
      - "test"
      - "prod"
  APP_IMAGE: $DOCKER_VIRTUAL/$CI_PROJECT_PATH:$CI_COMMIT_SHORT_SHA
  HELM_CHART_PATH: "$AIW_HELM_CHART"
  MANIFEST_OUTPUT_DIRECTORY: $CI_PROJECT_DIR/manifests

build-app:
  stage: build
  image: $DOCKER_VIRTUAL/node:11.0.0
  script:
    - printenv | sort
    - yarn config set npmRegistryServer $AIW_NPM_REGISTRY
    - yarn install
    - yarn build:ssr:$ENVIRONMENT
  rules:
    - if: $PIPELINE == "deploy"
      when: always
  artifacts:
    paths:
      - $CI_PROJECT_DIR/dist/

build-image:
  stage: build
  extends: .build-image
  needs:
    - job: build-app
      artifacts: true
  rules:
    - if: $PIPELINE == "deploy"
      when: on_success
  variables:
    CONTEXT: .
    DOCKERFILE: Dockerfile
    IMAGE_TAG: $APP_IMAGE
    EXTRA_ARGS: --build-arg SAGOKU_ENV=$ENVIRONMENT

render-charts:
  stage: build
  extends: .render-charts
  rules:
    - if: $PIPELINE == "deploy" && $ENVIRONMENT == "prod"
      when: always
      variables:
        EXTRA_HELM_TEMPLATE_OPTIONS: --set healthcheckPath=/ --set autoscaling.minReplicas=3 --set autoscaling.maxReplicas=5
    - if: $PIPELINE == "deploy" && $ENVIRONMENT == "test"
      when: always
      variables:
        EXTRA_HELM_TEMPLATE_OPTIONS: >
          --set healthcheckPath=/
          --set autoscaling.minReplicas=1
          --set autoscaling.maxReplicas=1
          --set-string resources.limits.cpu=300m
          --set-string resources.requests.cpu=20m
          --set-string resources.limits.memory=3Gi
          --set-string resources.requests.memory=1.5Gi

deploy:
  stage: deploy
  extends: .run-argo-deployer
  rules:
    - if: $PIPELINE == "deploy" && $ENVIRONMENT == "prod"
      when: on_success
      variables:
        ENVIRONMENT_URL: https://library.artstor.org/
    - if: $PIPELINE == "deploy" && $ENVIRONMENT == "test"
      when: on_success
      variables:
        ENVIRONMENT_URL: https://stage.artstor.org/
  environment:
    name: $ENVIRONMENT
    url: ENVIRONMENT_URL
  variables:
    ACTION: deploy
    APP_NAME: artstor-ui
    GROUP_NAME: $ITHAKA_OWNER
    INPUT_FILES_LOCATION: manifests

argo-sync:
  stage: deploy
  extends: .argocd-sync
  needs:
    - deploy
  rules:
    - if: $PIPELINE == "deploy"
      when: on_success
  variables:
    APP_NAME: artstor-ui

healthcheck:
  stage: healthcheck
  extends: .check-healthy-deployment
  needs:
    - deploy
  variables:
    APP_TYPE: "nodejs"
    HEALTHCHECK_MAX_ITER: 200 # number of times to check
    HEALTHCHECK_MAX_WAIT: 5 # in seconds
  inherit:
    variables: true
  retry: 1
  timeout: 30 minutes
