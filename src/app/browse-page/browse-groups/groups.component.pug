//- nav.nav.nav-inline.browse-nav
  //- a.label Browse By:
  //- a.nav-link(*ngFor="let browseOpt of groupFilterArray", [ngClass]="{'active': browseOpt.level == route.snapshot.params.view}", [routerLink]="['/browse', 'groups', browseOpt.level]", (click)="browseOpt.level === 'search' ? firstSearch = true : firstSearch = false")
  //-   div(*ngIf="browseOpt.level !== 'all'") {{ browseOpt.label }}
.row.pt-3#browse-group-wrap
  .col-md-3.hidden-sm-down
    div(aria-activedescendant="button")
      button.skip-btn#skip-to-groups-link((click)="skipToGrpSec()", (keyup.enter)="skipToGrpSec()", tabindex="3", class="sr-only sr-only-focusable") This is the filter by groups and tags section, skip to the image groups section.
    //- .filter-list-wrap
    //- The .driver-find-group class is important for the tour to find it, be careful when removing or changing it
    #searchFilterList.mb-3.filter-list.driver-find-group
      h3.pt-2 Groups
        = " "
        ang-guide-tour([steps]="steps")
      hr
      div(*ngFor="let filter of groupFilterArray")
        button.filter.filter--tag#group--list(
            [ngClass]="{ 'child' : filter.level==='private' || filter.level==='shared_by_me', 'group-filter': !(filter.level==='private' || filter.level==='shared_by_me') }",
            (click)="setSearchLevel(filter.level, true)",
            [class.active]="filter.selected",
            [attr.title]="filter.ariaLabel",
            [attr.aria-label]="filter.ariaLabel",
            tabindex="3"
          )
          | {{ filter.label }}
    ang-tags-list(*ngIf="selectedFilter")
  .col-md-9
    div(aria-activedescendant="button")
      button.skip-btn#skip-to-filters-link((click)="skipToFilterSec()", (keyup.enter)="skipToFilterSec()", tabindex="3", class="sr-only sr-only-focusable") This is the image groups section. Skip to the filter by groups and tags section.
    .row#search-row
      .col-sm-9
        ang-general-search([updateSearchTerm]="updateSearchTerm", [init]="searchTerm", [loadingGrps]="loading", (clearGrpSearch)="clearGrpSearch()", (executeSearch)="addQueryParams({ term: $event, page: 1, sort: 'relevance' }, false, true)")
      .col-sm-3
        //- Further functionality will go here
    h3.pb-1.px-2.numResult([innerHTML]="isSearch ? numResultMsg : selectedFilter.label")
    .row.mb-3
      .col-sm-7.col-md-7.col-lg-8.pd-left
        //- This is where the sort method, number of group per page selection and toggle between cardview and listview go
        li.sortlist.dropdown(ngbDropdown)
          button#sortdropdownMenu.btn.btn-link(ngbDropdownToggle, tabindex="3", attr.aria-label="Sort by {{ activeSort.name ? activeSort.name : 'Alphabetical' }}", (focus)="closeSortDropdown()", (keyup.esc)="closeSortDropdown()") Sort:
            = " "
            span.value {{ activeSort.name ? activeSort.name : 'Alphabetical' }}
          .dropdown-menu(ngbDropdownMenu, aria-labelledby="sortdropdownMenu")
            button.dropdown-item(id="recentSortOpt", [disabled]="activeSort.label === 'date'", [ngClass]="{ 'disable': activeSort.label === 'date' }", (click)="changeSortOpt('date')", tabindex="3", (keyup.arrowdown)="sortDropdownOptsArrowDown($event.target)", (keyup.esc)="closeSortDropdown()") Recently Modified
            button.dropdown-item(id="alphaSortOpt", [disabled]="activeSort.label === 'alpha'", [ngClass]="{ 'disable': activeSort.label === 'alpha' }", (click)="changeSortOpt('alpha')", tabindex="3", (keyup.arrowup)="sortDropdownOptsArrowUp($event.target)", (keyup.arrowdown)="sortDropdownOptsArrowDown($event.target)", (keyup.esc)="closeSortDropdown()") Alphabetical
            button.dropdown-item(id="relSortOpt", [disabled]="activeSort.label === 'relevance'", *ngIf="isSearch", [ngClass]="{ 'disable': activeSort.label === 'relevance' }", (click)="changeSortOpt('relevance')", tabindex="3", (keyup.arrowup)="sortDropdownOptsArrowUp($event.target)", (keyup.esc)="closeSortDropdown()") Relevance

      .col-sm-5.col-md-5.col-lg-4.text-right.grid-pagination-bar
        pagination([pageObj]="pagination", (goToPage)="goToPage($event)", [right]="true", (paginationFocused)="closeSortDropdown()")
    h3.pb-1.px-2(*ngIf="_tagFilters.selectedFilters.length>0") Tags:
      .filter.filter--aboveGroup(*ngFor="let tag of _tagFilters.selectedFilters", (click)="tag.selected = !tag.selected", (keyup.enter)="tag.selected = !tag.selected", [class.active]="tag.selected", tabindex="3", [attr.aria-label]="'Filtering by ' + tag.key + ', which is associated with ' + tag.doc_count + ' image groups. Press enter to remove this tag currently being used to filter down the image group results.'", role="button")
        span.notranslate.filter-padding {{ tag.key }} ({{ tag.doc_count }})
        i.icon.icon-add
        i.icon.icon-close
      a#groupTagsClear.link--accent.small(*ngIf="_tagFilters.selectedFilters.length>1", style="margin:3px;", (click)="_tagFilters.clearFilters();", (keyup.enter)="_tagFilters.clearFilters();", tabindex="3", aria-label="Clear all tags") Clear All
    .group-list.has-icon-overlay.px-2
      .alert.alert-warning(*ngIf="selectedFilter && errorObj[selectedFilter.level]", [innerHtml]="errorObj[selectedFilter.level]")
      ng-container
        ang-card-view(*ngFor="let tag of tags; let i=index;", [tag]="tag", [group]="groups[i]", [browseLevel]="selectedFilter.level", link="true")
      //- ng-container(*ngIf="!showCardView")
      //-   ang-tag(*ngFor="let tag of tags", [tag]="tag", link="true")
    .row.has-icon-overlay(*ngIf="loading")
      i.icon-lg.icon-overlay--top.icon-loading-large
//- Don't show this if there is a filters list, if it's loading, or if the user hasn't searched for anything yet
.alert.alert-info(*ngIf="!isSearch && tags.length < 1 && !loading")
  h3 {{ 'BROWSE.ERRORS.NO_GROUPS_COLLECTIONS_HEADING' | translate }}
  br
  div(*ngIf="selectedFilter && selectedFilter.level === 'created'", [innerHtml]="'BROWSE.ERRORS.NO_PRIVATE_GROUPS_COLLECTIONS_PROMPT' | translate")
  div(*ngIf="selectedFilter && selectedFilter.level === 'institution'", [innerHtml]="'BROWSE.ERRORS.NO_INSTITUTIONAL_GROUPS_COLLECTIONS_PROMPT' | translate")
ang-access-denied-modal(*ngIf="showAccessDeniedModal")

